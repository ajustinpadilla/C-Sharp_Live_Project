@using TheatreCMS.Models
@using TheatreCMS.Helpers
@model IEnumerable<Production>
@{
    ViewBag.Title = "Archive";
}


<!--Jumbotron header-->
<div class="jumbotron jumbotron-fluid bgimage">
    <div class="container">
        <h1 class="display-4">Theatre Vertigo Archive</h1>
        <p class="">
            In 1997, Theatre Vertigo was founded by Paul Floding, Nanette Pettit and Jeff Meyers.  Since then, Theatre Vertigo has performed in numerous spaces including The Russell Street Theater, The Electric Company, Theater!Theatre!, and their current home, The Shoebox Theater.
            From 2003 to 2014, Theatre Vertigo produced Anonymous Theatre as a summer fundraiser in collaboration with The Anonymous Theatre Company.  Other past collaborations include defunkt theatre, Stark Raving Theater, and Tears of Joy Theatre.
            Theatre Vertigo has worked on world premieres including Faust.Us by Joseph Fisher, 99 Ways to Fuck a Swan by Kim Rosenstock, and The End of Sex by Craig Jessen.
            In 2016, Theatre Vertigo produced its first officially commissioned work from a playwright, I Want To Destroy You, by Rob Handel.
        </p>
    </div>
</div>

    <!--Current Productions-->
    <div>
        <h4>Current Productions</h4>
        <div class="card-deck bg-black">
            <div class="card bg-black">
                <img src="~/Content/Images/Stupid-ghost.png" class="card-img-top bg-black" alt="Ghost">
                <div class="card-body">
                    <h5 class="card-title">Stupid Ghost</h5>
                    <p class="card-text">A clumsy ghost that stubs his toe everynight, spooking the new tenants.</p>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-block btn-primary" disabled>Get Tickets</button>
                </div>
            </div>
            <div class="card bg-black">
                <img src="~/Content/Images/Midas-gold.jpg" class="card-img-top bg-black" alt="Midas">
                <div class="card-body">
                    <h5 class="card-title">Everything You Touch</h5>
                    <p class="card-text">A cursed man that ruins everything he touches.</p>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-block btn-primary" disabled>Get Tickets</button>
                </div>
            </div>
            <div class="card bg-black">
                <img src="~/Content/Images/venice.jpg" class="card-img-top bg-black" alt="Merchant">
                <div class="card-body">
                    <h5 class="card-title">Merchant of Venice</h5>
                    <p class="card-text">A Merchant in Venice struggles to pay off his student loans.</p>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-block btn-primary" disabled>Get Tickets</button>
                </div>
            </div>
        </div>
        <hr />
    </div>

<!--Seach Bar/ Actors,parts, and productions dropdown-->
@using (Html.BeginForm("Archive", "Home", FormMethod.Post))
{
    <div class="container" style="align-content:center">
        @Html.TextBox("ArchiveSearchField")
        <select id="SearchByCategory" name="SearchByCategory">
            <option value="ArchiveAll">Search All</option>
            <option value="ArchiveCastMember">Cast Member</option>
            <option value="ArchiveProduction">Production</option>
            <option value="ArchivePart">Part</option>
        </select>
        <button class="btn btn-outline-primary" type="submit" value="search">Search</button>
    </div>


}
@*<div class="container" style="align-content:center">
        <nav class="navbar navbar-expand-xl">
            <form class="form-inline">
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse justify-content-center" id="navbarSupportedContent">

                    <input class="form-control mr-2" type="search" placeholder="Search" aria-label="Search">
                    <div class="dropdown">
                        <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Search by category
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" href="#Cast_Member">Cast Member</a>
                            <a class="dropdown-item" href="#Part">Part</a>
                            <a class="dropdown-item" href="#Production">Production</a>
                        </div>
                        <button class="btn btn-outline-primary" type="submit">Search</button>
                    </div>
                </div>
            </form>
        </nav>
    </div>*@

<div class="resultsContainer">

    @if (ViewData["ResultsCast"] != null || ViewData["ResultsProduction"] != null || ViewData["ResultsPart"] != null)
    {
        switch (ViewBag.Category)
        {
            case "ArchiveAll":
                if (ViewData["ResultsCast"] != null)
                {
                    <table style="width:100%" class="results">
                        <tr>
                            <th>Cast Member</th>
                            <th>Year Joined</th>
                            <th>Bio</th>
                        </tr>
                        @for (int i = 0; i < ViewBag.ResultsCast.Count; i++)  //This is a for instead of a for each, because YearJoined is a separate list from ResultsCast.
                        {
                            <tr>
                                <td>@Html.Raw(ViewBag.ResultsCast[i].Name)</td>
                                <td>@Html.Raw(ViewBag.YearJoined[i])</td>
                                <td>@Html.Raw(ViewBag.ResultsCast[i].Bio)</td>
                            </tr>
                        }
                    </table><br />
                }
                if (ViewData["ResultsProduction"] != null)
                {
                    <table style="width:100%" class="results">
                        <tr>
                            <th>Production</th>
                            <th>Playwright</th>
                            <th>Description</th>
                        </tr>
                        @foreach (var item in ViewData["ResultsProduction"] as List<Production>)
                        {
                            <tr>
                                <td>@Html.Raw(@item.Title)</td>
                                <td>@Html.Raw(@item.Playwright)</td>
                                <td>@Html.Raw(@item.Description)</td>
                            </tr>
                        }
                    </table><br />
                }
                if (ViewData["ResultsPart"] != null)
                {
                    <table style="width:100%" class="results">
                        <tr>
                            <th>Part</th>
                            <th>Production</th>
                            <th>Cast Member</th>
                        </tr>
                        @foreach (var item in ViewData["ResultsPart"] as List<Part>)
                        {
                            <tr>
                                <td>@Html.Raw(@item.Character)</td>
                                <td>@Html.Raw(@item.Production.Title)</td>
                                <td>@Html.Raw(@item.Person.Name)</td>
                            </tr>

                        }
                    </table><br />
                }
                <p>@ViewBag.Message</p>

                break;
            case "ArchiveCastMember":
                <table style="width:100%" class="results">
                    <tr>
                        <th>Cast Member</th>
                        <th>Year Joined</th>
                        <th>Bio</th>
                    </tr>
                    @for (int i = 0; i < ViewBag.ResultsCast.Count; i++)  //This is a for instead of a for each, because YearJoined is a separate list from ResultsCast.
                        {
                            <tr>
                                <td>@Html.Raw(ViewBag.ResultsCast[i].Name)</td>
                                <td>@Html.Raw(ViewBag.YearJoined[i])</td>
                                <td>@Html.Raw(ViewBag.ResultsCast[i].Bio)</td>
                            </tr>
                        }
                    <caption>@ViewBag.Message</caption>
                </table>
                break;
            case "ArchiveProduction":
                <table style="width:100%" class="results">
                    <tr>
                        <th>Production</th>
                        <th>Playwright</th>
                        <th>Description</th>
                    </tr>
                    @foreach (var item in ViewData["ResultsProduction"] as List<Production>)
                    {
                        <tr>
                            <td>@Html.Raw(@item.Title)</td>
                            <td>@Html.Raw(@item.Playwright)</td>
                            <td>@Html.Raw(@item.Description)</td>
                        </tr>
                    }
                    <caption>@ViewBag.Message</caption>
                </table>
                break;
            case "ArchivePart":
                <table style="width:100%" class="results">
                    <tr>
                        <th>Part</th>
                        <th>Production</th>
                        <th>Cast Member</th>
                    </tr>
                    @foreach (var item in ViewData["ResultsPart"] as List<Part>)
                    {
                        <tr>
                            <td>@Html.Raw(@item.Character)</td>
                            <td>@Html.Raw(@item.Production.Title)</td>
                            <td>@Html.Raw(@item.Person.Name)</td>
                        </tr>

                    }
                    <caption>@ViewBag.Message</caption>
                </table>
                break;
        }

    }

</div>




<hr />

<!--Past Productions-->
@{ 
    var currentSettings = AdminSettingsReader.CurrentSettings();            // Grabs AdminSettings JSON 
    int currentSeason = currentSettings.current_season;                     // Initialize currentSeason and set using "current_season" from JSON
    int firstYear = 1997;
    int secondYear = 1998;
    Dictionary<int, string> seasonYears = new Dictionary<int, string>();    // Create Dictionary containing Seasons and their years    
    for (int i = 1; i <= currentSeason; i++)
    {
        seasonYears.Add(i, firstYear.ToString() + " - " + secondYear.ToString());
        firstYear++;
        secondYear++;
    }
}
<div class="container">
    <div class="h4">Past Productions</div> 
    <div class="accordian" id="pastProductions">
        <!-- Begin for loop to populate years-->
        @for (int i = currentSeason; i >= 1; i--)
        {
            string currentHeading = "heading" + i.ToString(); 
            string currentBody = "season" + i.ToString();
            <div class="card bg-black">
                <!-- header -->
                <div class="card-header text-center" id="@currentHeading"> 
                    <h2 class="mb-0">
                        <button class="btn btn-block text-white" type="button" data-toggle="collapse" data-target="@('#' + currentBody)" aria-expanded="false" aria-controls="@currentBody">
                            @seasonYears[i]
                        </button>
                    </h2>
                </div>
                <!-- Collapsable body -->
                <div id="@currentBody" class="collapse" aria-labelledby="@currentHeading" data-parent="#pastProductions">
                    <div class="card-body">
                        <div class="card-deck bg-black">
                            <!-- Iterate through Productions and populate cards-->
                            @foreach (var item in Model)
                            {
                                if (item.Season == i)
                                {
                                    <div class="card bg-black">
                                        @if (item.DefaultPhoto != null)
                                        {
                                            <div class="embed-responsive-4by3">
                                                <img src="@Url.Action("DisplayPhoto", "Photo", new { id = item.DefaultPhoto.PhotoId })" class="card-img-top arch-card-img bg-black">
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="embed-responsive-4by3">
                                                <img src="~/Content/Images/Unavailable.png" class="card-img-top arch-card-img bg-black">
                                            </div>
                                        }
                                        <div class="card-body">
                                            <h5 class="card-title">
                                                @Html.DisplayFor(modelItem => item.Title)
                                            </h5>
                                            <p class="card-text">
                                                @Html.DisplayFor(modelItem => item.Description)
                                            </p>
                                            <a href="@Url.Action("Details", "Productions", new { id = item.ProductionId })" class="stretched-link"></a> 
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>