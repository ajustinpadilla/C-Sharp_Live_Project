@model IEnumerable<TheatreCMS.Models.Part>
@using TheatreCMS.Enum;

@{
    ViewBag.Title = "Part";
}

<h2 class="ml-5 mb-3 mt-4">Part</h2>
<div class="container ml-5 mb-3 mt-4">
    <div class="row">
        <h6>Filter By...</h6>
    </div>
    <div class="row">
        @* The HTML helper creates a form and when the form is submitted it calls the Index() method from PartController. *@
        @using (Html.BeginForm("Index", "Part", FormMethod.Post, new { @id = "partsForm" }))
        {
            // Creates a drop down list referencing the information from ViewData dictionary, which contains 'ProductionsID' key. The value that is selected is submitted onchange.
            @Html.DropDownList("ProductionsID", (IEnumerable<SelectListItem>)null, "All Productions", new { @class = "col-5 col-md-3 text-muted mr-3", @onchange = "document.getElementById('partsForm').submit();" })

            @Html.DropDownList("CastMembersID", (IEnumerable<SelectListItem>)null, "All Cast Members", new { @class = "col-5 col-md-3 text-muted mr-3", @onchange = "document.getElementById('partsForm').submit();" })

            @Html.DropDownList("Roles", (IEnumerable<SelectListItem>)null, "All Roles", new { @class = "col-5 col-md-3 text-muted", @onchange = "document.getElementById('partsForm').submit();" })
        }
    </div>
</div>
<div class="container ml-5 mb-3">
    <div class="row">
        @if (User.IsInRole("Admin"))
        {
            <p>
                @Html.ActionLink("Create New", "Create")
            </p>
        }
    </div>
    <div class="row">
        <h6>
            @Html.ActionLink("Reset Filters", "ResetFilters")
        </h6>
    </div>
</div>



<div class="ml-1 mr-1 justify-content-center part-card-deck">
    <!--Creates a bootstrap card for every part in the production customized to the part they are reponsible for-->
    @foreach (var item in Model)
    {
        <div class="part-cardHover">
            <div class="text-light mb-3 align-items-center part-card border-white">
                <h5 class="mt-3 mb-3 underline text-center">@Html.DisplayFor(modelItem => item.Person.Name)</h5>
                <!--Check for what type of job and displays correct formatting for card.-->
                @if ((int)item.Type > 0)
                {
                    //non-actor formatting
                    <h6 class=" ml-4 mr-4 text-center"> @Html.DisplayFor(modelItem => item.Type)</h6>
                }
                else
                {
                    //actor formatting
                    <p class="font-italic text-center mb-0">Performed By:</p>
                    <h6 class="mb-1 text-center"> @Html.DisplayFor(modelItem => item.Person.Name) </h6>
                }
                <p class="font-italic m-0">In the Production:</p>
                <h6 class=" ml-4 mr-4 text-center">@Html.DisplayFor(modelItem => item.Production.Title)</h6>
                <p class="bold mt-1 mb-0 text-center">Details</p>
                <p class="card-text ml-3 mr-3 part-details-elipsis">@Html.DisplayFor(modelItem => (item.Details))</p>
                <!--Card overlay for edit tools-->
                <div class="part-overlay mask d-flex align-items-end justify-content-center">
                    <!--condition to look for admin authority and give access to edit options for cards-->
                    @if (User.IsInRole("Admin"))
                    {
                        <span class="badge badge-pill badge-light m-1">@Html.ActionLink("Edit", "Edit", new { id = item.PartID })  </span>
                        <span class="badge badge-pill badge-light m-1">@Html.ActionLink("Delete", "Delete", new { id = item.PartID }) </span>
                        <span class="badge badge-pill badge-light m-1">@Html.ActionLink("Details", "Details", new { id = item.PartID }) </span>
                    }
                </div>
            </div>
        </div>
    }
</div>

